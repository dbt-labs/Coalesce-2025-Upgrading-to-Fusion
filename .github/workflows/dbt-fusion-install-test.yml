name: dbt Fusion Installation Test

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/**'

jobs:
  test-fusion-install:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download and install dbt Fusion
      run: |
        echo "Downloading dbt Fusion..."
        curl -fsSL https://public.cdn.getdbt.com/fs/install/install.sh | sh -s -- --update
        
        # Add dbt Fusion to PATH for subsequent steps
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
        # Check what was actually installed
        echo "Contents of ~/.local/bin:"
        ls -la ~/.local/bin/
        
        echo "Contents of ~/.bashrc (last 10 lines):"
        tail -10 ~/.bashrc

    - name: Verify dbt Fusion installation
      run: |
        # Source bashrc to get the updated PATH and alias
        source ~/.bashrc
        export PATH="$HOME/.local/bin:$PATH"
        
        echo "Trying 'dbt --version':"
        dbt --version || echo "dbt command failed"
        echo "Trying 'dbtf --version':"
        dbtf --version || echo "dbtf command failed"
        
        # If dbtf works, show help
        if command -v dbtf &> /dev/null; then
          echo "Available dbt Fusion commands:"
          dbtf --help
        elif command -v dbt &> /dev/null; then
          echo "Available dbt commands:"
          dbt --help
        fi

    - name: Test dbt project structure validation
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        
        # Test that dbt can read the project file
        echo "Testing dbt project structure..."
        source ~/.bashrc && dbtf debug --config-dir . || dbt debug --config-dir . || echo "Debug failed (expected without profiles.yml)"
        
        # List available models
        echo "Project models structure:"
        find models -name "*.sql" -o -name "*.py" | head -10

    - name: Validate dbt_project.yml syntax
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        
        # Basic YAML syntax validation
        python3 -c "
        import yaml
        with open('dbt_project.yml', 'r') as f:
            config = yaml.safe_load(f)
            print('‚úÖ dbt_project.yml syntax is valid')
            print(f'Project name: {config.get(\"name\")}')
            print(f'Project version: {config.get(\"version\")}')
        "

    - name: Check for common Fusion compatibility issues
      run: |
        echo "Checking for potential Fusion compatibility issues..."
        
        # Check for deprecated configurations
        echo "üîç Checking for deprecated configurations..."
        grep -r "warn_error:" . --include="*.yml" --include="*.yaml" || echo "No warn_error found"
        grep -r "quoting:" . --include="*.yml" --include="*.yaml" || echo "No quoting issues found"
        
        # Check for old macro patterns
        echo "üîç Checking for old macro patterns..."
        grep -r "adapter_macro" . --include="*.sql" || echo "No adapter_macro found"
        grep -r "adapter\.dispatch" . --include="*.sql" || echo "No adapter.dispatch found"
        
        echo "‚úÖ Installation test completed successfully!"
