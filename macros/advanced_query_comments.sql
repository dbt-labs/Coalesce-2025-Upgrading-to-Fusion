{% macro generate_advanced_query_comment() %}
  {# Advanced query comment generation with dynamic metadata - soft blocker #}
  
  {%- set query_metadata = {
    'dbt_version': dbt_version,
    'project_name': project_name,
    'model_name': this.name if this else 'unknown',
    'run_started_at': run_started_at.strftime("%Y-%m-%d %H:%M:%S"),
    'target_name': target.name,
    'user': env_var('DBT_USER', 'system'),
    'git_sha': env_var('DBT_CLOUD_GIT_SHA', 'unknown'),
    'job_id': env_var('DBT_CLOUD_JOB_ID', 'local'),
    'run_id': env_var('DBT_CLOUD_RUN_ID', 'local')
  } -%}
  
  {%- set graph_context = {} -%}
  {% if graph %}
    {%- set current_node = graph.nodes.get(model.unique_id) if model else none -%}
    {% if current_node %}
      {%- set graph_context = {
        'depends_on_count': current_node.depends_on.nodes | length,
        'config_materialized': current_node.config.materialized,
        'tags': current_node.tags | join(','),
        'resource_type': current_node.resource_type
      } -%}
    {% endif %}
  {% endif %}
  
  {%- set performance_hints = {
    'query_type': 'dbt_model',
    'expected_rows': var('expected_rows_' ~ this.name, 'unknown') if this else 'unknown',
    'complexity_score': calculate_complexity_score(),
    'warehouse_size_hint': get_optimal_warehouse_size()
  } -%}
  
  {%- set compliance_info = {
    'data_classification': get_data_classification(),
    'retention_policy': get_retention_policy(),
    'privacy_level': get_privacy_level(),
    'audit_required': is_audit_required()
  } -%}
  
  /* 
  ===========================================
  dbt Query Metadata & Performance Context
  ===========================================
  Project: {{ query_metadata.project_name }}
  Model: {{ query_metadata.model_name }}
  dbt Version: {{ query_metadata.dbt_version }}
  Target: {{ query_metadata.target_name }}
  Run Started: {{ query_metadata.run_started_at }}
  User: {{ query_metadata.user }}
  Git SHA: {{ query_metadata.git_sha }}
  Job ID: {{ query_metadata.job_id }}
  Run ID: {{ query_metadata.run_id }}
  
  Graph Context:
  - Dependencies: {{ graph_context.get('depends_on_count', 'N/A') }}
  - Materialization: {{ graph_context.get('config_materialized', 'N/A') }}
  - Tags: {{ graph_context.get('tags', 'none') }}
  - Resource Type: {{ graph_context.get('resource_type', 'N/A') }}
  
  Performance Hints:
  - Query Type: {{ performance_hints.query_type }}
  - Expected Rows: {{ performance_hints.expected_rows }}
  - Complexity Score: {{ performance_hints.complexity_score }}
  - Recommended Warehouse: {{ performance_hints.warehouse_size_hint }}
  
  Compliance & Governance:
  - Data Classification: {{ compliance_info.data_classification }}
  - Retention Policy: {{ compliance_info.retention_policy }}
  - Privacy Level: {{ compliance_info.privacy_level }}
  - Audit Required: {{ compliance_info.audit_required }}
  
  Query Cost Estimation: ${{ estimate_query_cost() }}
  Generated by dbt at {{ modules.datetime.datetime.now().isoformat() }}
  ===========================================
  */
  
{% endmacro %}

{% macro calculate_complexity_score() %}
  {# Calculate a complexity score based on model characteristics #}
  {% set base_score = 1 %}
  {% set score = base_score %}
  
  {% if this %}
    {# Increase score based on model characteristics #}
    {% if this.name | length > 20 %}
      {% set score = score + 1 %}
    {% endif %}
    
    {% if 'python' in this.name %}
      {% set score = score + 5 %}
    {% endif %}
    
    {% if 'incremental' in (config.get('materialized', '') | lower) %}
      {% set score = score + 2 %}
    {% endif %}
  {% endif %}
  
  {{ score }}
{% endmacro %}

{% macro get_optimal_warehouse_size() %}
  {% set complexity = calculate_complexity_score() %}
  {% if complexity <= 2 %}
    {{ return('SMALL') }}
  {% elif complexity <= 4 %}
    {{ return('MEDIUM') }}
  {% else %}
    {{ return('LARGE') }}
  {% endif %}
{% endmacro %}

{% macro get_data_classification() %}
  {% if this and 'customer' in this.name.lower() %}
    {{ return('PII') }}
  {% elif this and ('financial' in this.name.lower() or 'revenue' in this.name.lower()) %}
    {{ return('FINANCIAL') }}
  {% else %}
    {{ return('PUBLIC') }}
  {% endif %}
{% endmacro %}

{% macro get_retention_policy() %}
  {% set classification = get_data_classification() %}
  {% if classification == 'PII' %}
    {{ return('7_YEARS') }}
  {% elif classification == 'FINANCIAL' %}
    {{ return('10_YEARS') }}
  {% else %}
    {{ return('3_YEARS') }}
  {% endif %}
{% endmacro %}

{% macro get_privacy_level() %}
  {% set classification = get_data_classification() %}
  {% if classification == 'PII' %}
    {{ return('HIGH') }}
  {% elif classification == 'FINANCIAL' %}
    {{ return('MEDIUM') }}
  {% else %}
    {{ return('LOW') }}
  {% endif %}
{% endmacro %}

{% macro is_audit_required() %}
  {% set classification = get_data_classification() %}
  {% if classification in ['PII', 'FINANCIAL'] %}
    {{ return('TRUE') }}
  {% else %}
    {{ return('FALSE') }}
  {% endif %}
{% endmacro %}

{% macro estimate_query_cost() %}
  {# Simplified cost estimation based on complexity #}
  {% set complexity = calculate_complexity_score() %}
  {% set base_cost = 0.01 %}
  {% set estimated_cost = base_cost * complexity %}
  {{ "%.3f" | format(estimated_cost) }}
{% endmacro %}

{# Advanced query comment override - rename to avoid conflict #}
{% macro advanced_query_comment_override(node) %}
  {{ generate_advanced_query_comment() }}
{% endmacro %}
